"use strict";(self.webpackChunknh_docs=self.webpackChunknh_docs||[]).push([[7247],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=o.createContext({}),s=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=s(e.components);return o.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return t?o.createElement(f,r(r({ref:n},c),{},{components:t})):o.createElement(f,r({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var s=2;s<i;s++)r[s]=t[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8311:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var o=t(2122),a=t(9756),i=(t(7294),t(3905)),r=["components"],l={},p="Config Reference",s={unversionedId:"config/config-ref",id:"config/config-ref",isDocsHomePage:!1,title:"Config Reference",description:"Full Config Specs",source:"@site/docs/config/config-ref.md",sourceDirName:"config",slug:"/config/config-ref",permalink:"/docs/config/config-ref",editUrl:"https://github.com/nocalhost/nocalhost.github.io/tree/main/docs/config/config-ref.md",version:"current",lastUpdatedBy:"Garry",lastUpdatedAt:1629452897,formattedLastUpdatedAt:"8/20/2021",frontMatter:{},sidebar:"docs",previous:{title:"Log Viewer",permalink:"/docs/guides/debug/log-viewer"},next:{title:"Config services",permalink:"/docs/config/config-services"}},c=[{value:"Full Config Specs",id:"full-config-specs",children:[]},{value:"Configuration Structure",id:"configuration-structure",children:[]},{value:"<code>configProperties</code>",id:"configproperties",children:[]},{value:"<code>application</code>",id:"application",children:[{value:"<code>application.onPreInstall</code>",id:"applicationonpreinstall",children:[]},{value:"<code>application.helmVersion</code> and <code>application.helmValues</code>",id:"applicationhelmversion-and-applicationhelmvalues",children:[]},{value:"<code>application.env</code> and <code>application.envFrom</code>",id:"applicationenv-and-applicationenvfrom",children:[]},{value:"<code>application.services</code>",id:"applicationservices",children:[]}]}],u={toc:c};function d(e){var n=e.components,t=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"config-reference"},"Config Reference"),(0,i.kt)("h2",{id:"full-config-specs"},"Full Config Specs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'# Specify config properties\n# type: object\n# default value: {}\n# required\nconfigProperties:\n\n  # config file version\n  # type: string\n  # default value: null\n  # required\n  version: v2\n\n  # env file name, substitution variable for this file\n  # type: string\n  # default value: null\n  # optional\n  envFile: env.dev\n\napplication:\n\n  # Application name\n  # type: string(dns1123)\n  # default value: null\n  # required\n  # nhctl param: [NAME]\n  # uniq\n  name: coding-agile\n\n  # Application k8s manifest type\n  # type: select\uff0coptions\uff1ahelmGit/helmRepo/rawManifest/rawManifestLocal/helmLocal\n  # default value: null\n  # required\n  # nhctl param: --type,-t\n  manifestType: rawManifest\n\n  # Set default application version for helmRepo\n  # type: string\n  # deafult value: latest\n  # optional\n  helmVersion: 0.0.1\n\n  # helmGit: chart path: relative path of git repo root.\n  # helmLocal: chart path: relative path of local helm chart path.\n  # helmRepo: no meaning\n  # rawManifestGit: manifest files path: multi relative paths of git repo root\n  # rawManifestLocal: manifest files path: multi relative paths of local application path\n  # kustomizeGit: kustomize file path: relative path of git repo\n  # kustomizeLocal: kustomize file path: multi relative paths of local application path\n  # type: string[]\n  # default value: ["."]\n  # required\n  resourcePath: []\n\n  # helmGit: no meaning.\n  # helmRepo: no meaning.\n  # rawManifestGit: ignored manifest path: multi relative paths of git repo root.\n  # rawManifestLocal: ignored manifest path: multi relative paths of local application path.\n  # helmLocal: no meaning.\n  # type: string[]\n  # default value: ["."]\n  # optional\n  ignoredPath: []\n\n  # The jobs to be executed before application\'s installation.\n  # type: object[]\n  # default value: []\n  # optional\n  onPreInstall: \n\n    # Job yaml file, the relative path of the repo root\n    # type: string\n    # required\n    - path: "job-1.yaml"\n\n      # Order of execution of job, The smaller the value, the first to execute\n      # type: integer\n      # default value: 0\n      # optional\n      weight: -1\n\n    - path: "job-2.yaml"\n      weight: 5\n\n  # Overwrite helm values.yaml\n  # type: object[]\n  # default value: []\n  # optional\n  helmValues:\n    - key: DOMAIN\n      value: ${DOMAIN:-www.coding.com}\n    - key: DEBUG\n      value: ${DEBUG:-true}\n\n  # Inject environment variable for all workload \n  # type: object[]\n  # default value: []\n  # optional\n  env: \n    - name: DEBUG\n      value: ${DEBUG:-true}\n    - name: DOMAIN\n      value: "www.coding.com"\n\n  # Use envFile to inject environment variable for all workload \n  # If specify env and envFrom at the same time, then use intersection of them, and use env key as primary\n  # type: object[]\n  # default value: []\n  # optional\n  envFrom: \n    envFile: \n      - path: dev.env\n      - path: dev.env\n\n  # The Applicaion\'s micro services\n  # type: object[]\n  # default value: []\n  # optional\n  services:\n\n    # Name of service, the name of workload in cluster\n    # type: string\n    # default value: null\n    # required\n    - name: e-coding\n\n      # The Kubernetes Workloads type corresponding to the service\n      # type: select, options: deployment/statefulset/pod/job/cronjob/daemonset case insensitive \n      # default value: deployment\n      # required\n      serviceType: deployment\n\n      dependLabelSelector: \n\n        # Dependent Pods label selector (The service will not start until the Pods selected by selector being ready.)\n        # type: string[]\n        # default value: []\n        # optional\n        pods: \n          - "name=mariadb"\n          - "app.kubernetes.io/name=mariadb"\n\n        # Dependent Jobs label selector (The service will not start until the Jobs selected by selector completed.)\n        # type: string[]\n        # default value: []\n        # optional\n        jobs:\n          - "job-name=init-job"\n          - "app.kubernetes.io/name=init-job"\n\n      containers:\n\n        # When the Pod has multiple containers, specify the container name.\n        # type: string\n        # default value: ""\n        # optional\n        - name: coding\n\n          # Specify installation parameters\n          # type: object\n          # default value: {}\n          # optional\n          install: \n\n            # Inject environment variable for container when installed\n            # type: object[]\n            # default value: []\n            # optional\n            env: \n              - name: DEBUG\n                value: "true"\n              - name: DOMAIN\n                value: "www.coding.com"\n\n            # Use envFile to inject environment variable for container when installed\n            # If specify env and envFrom at the same time, then use intersection of them, and use env key as primary\n            # type: object[]\n            # default value: []\n            # optional\n            envFrom: \n              envFile: \n                - path: dev.env\n                - path: dev.env\n\n            # Ports to be forwarded to local when workload has been installed \n            # localPort:remotePort\n            # type: string[]\n            # default value: []\n            # optional\n            portForward:\n              - 3306:3306\n\n          # Specify development parameters\n          # type: object\n          # default value: {}\n          # required\n          dev:\n\n            # The git repository clone url of the service\n            # type: string\n            # default value: null\n            # required\n            gitUrl: xxx-job\n\n            # DevContainer Image of the micro service\n            # type: string\n            # default value: null\n            # required\n            image: java:8-jdk\n\n            # The default shell of DevContainer\n            # type: string\n            # default value: "/bin/sh"\n            # optional\n            shell: "bash"\n\n            # The work directory of DevContainer\n            # type: string\n            # default value: "/home/nocalhost-dev"\n            # optional\n            workDir: "/root/nocalhost-dev"\n\n            # Specify resources requests and limits for DevContainer, same format to Kubernetes\'s resources (Not currently implemented)\n            # type: object\n            # default value: {}\n            # optional\n            resources:\n              limits:\n                cpu: "1"\n                memory: 1Gi\n              requests:\n                cpu: "0.5"\n                memory: 512Mi\n\n            # Storage of persistence volume\n            # type: string\n            # default value: null\n            # optional\n            storageClass: "cbs"\n\n            # Dirs to be persisted in DevContainer\n            # type: string[]\n            # default value: ["/home/nocalhost-dev"]\n            # optional\n            persistentVolumeDirs: \n\n              # Dir to be persisted in DevContainer\n              # type: string\n              # default value: null\n              # required\n              - path: "/root"\n\n                # Capability of the dir\n                # type: string\n                # default value: 10Gi\n                # optional\n                capacity: 100Gi\n\n            command: \n              # Build command of the service(Not currently implemented)\n              # type: string[]\n              # default value: [""]\n              # optional\n              build: ["./gradlew", "package"]\n\n              # Run command of the service\n              # default value: [""]\n              # optional\n              run: ["./gradlew", "bootRun"]\n\n              # Debug command of the service\n              # type: string[]\n              # default value: [""]\n              # optional\n              debug: ["./gradlew", "bootRun", "--debug-jvm"]\n\n              # Hot-reload run command of the service(Not currently implemented)\n              # type: string[]\n              # default value: [""]\n              # optional\n              hotReloadRun: ["bash", "-c", "kill `ps -ef|grep -i gradlew| grep -v grep| awk \'{print $2}\'`; gradlew bootRun"]\n\n              # Hot-reload debug command of the service(Not currently implemented)\n              # type: string[]\n              # default value: [""]\n              # optional\n              hotReloadDebug: ["bash", "-c", "kill `ps -ef|grep -i gradlew| grep -v grep| awk \'{print $2}\'`; gradlew bootRun --debug-jvm"]\n\n            # Specify debug parameter\n            # type: object\n            # default value: {}\n            # optional\n            debug: \n\n              # Specify remote debug port\n              # type: int\n              # default value: null\n              # optional\n              remoteDebugPort: 5005\n\n            # Use .dev-container of VSCode to specify DevContainer Image (Not currently implemented)\n            # type: string\n            # default value: ""\n            # optional\n            useDevContainer: false\n\n            # Specify file synchronization when enter development mode\n            # type: object\n            # default value: {}\n            # optional\n            sync: \n\n              # The synchronization file mode of the service (Not currently implemented)\n              # "send" specifies one-way synchronization to the container, "sendreceive" specifies two-way synchronization\n              # type: select\uff0csend/sendreceive\n              # default value: "send"\n              # optional\n              type: send\n\n              # List of files and directories to be synchronized to DevContainer\n              # type: string[]\n              # default value: ["."]\n              # optional\n              filePattern: \n                - "./src"\n                - "./pkg/fff"\n\n              # List of ignored files and directories to be synchronized to DevContainer\n              # type: string[]\n              # default value: []\n              # optional\n              ignoreFilePattern:\n                - ".git"\n                - "./build"\n\n            # Specify dev mode environment parameters\n            # type: object[]\n            # default value: {}\n            # optional\n            env: \n            - name: DEBUG\n              value: "true"\n            - name: DOMAIN\n              value: "www.coding.com"\n\n            # Use env file to specify dev mode environment parameters\n            # type: object\n            # default value: {}\n            # optional\n            envFrom:\n              envFile: \n                - path: dev.env\n                - path: dev.env\n\n            # Ports to be forwarded to local when enter devMode\n            # localPort:remotePort\n            # type: string[]\n            # default value: []\n            # optional\n            portForward:\n            - 3306:3306\n')),(0,i.kt)("h2",{id:"configuration-structure"},"Configuration Structure"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"configProperties: ...           # struct    | required | Specify config properties\n\napplication: ...                # struct    | required | Specify application configuration\n")),(0,i.kt)("h2",{id:"configproperties"},(0,i.kt)("inlineCode",{parentName:"h2"},"configProperties")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"configProperties:               \n    version: v2                 # string    | required | config file version\n    envFile: null               # string    | optional | env file name, substitution variable for this file\n")),(0,i.kt)("h2",{id:"application"},(0,i.kt)("inlineCode",{parentName:"h2"},"application")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Application")," is a concept of Nocalhost. An application consists of a set of ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/glossary/?all=true#term-manifest"},"Kubernetes manifests"),". These manifests contain resources descriptions of all the components you want to deploy."),(0,i.kt)("p",null,"Nocalhost allows you to customize the deployment and development of these components."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"application:                    \n    name: foo-app               # string    | required | Application name\n    manifestType: rawManifest   # string    | required | Application k8s manifest type\n    resourcePath: []            # string[]  | required | Set the application resource path\n    helmVersion: 0.0.1          # string    | optional | Set default application version for helmRepo\n    helmValues: ...             # struct    | optional | Overwrite Helm values.yaml\n    ignoredPath: []             # string[]  | optional | \n    onPreInstall: ...           # struct    | optional | The jobs to be executed before application's installation.\n    env: ...                    # struct    | optional | Inject environment variable for all workload when installed\n    envFrom: ...                # struct    | optional | Use envFile to inject environment variable for all workload when installed\n    services: ...               # struct    | optional | Applications' services configurations\n")),(0,i.kt)("h3",{id:"applicationonpreinstall"},(0,i.kt)("inlineCode",{parentName:"h3"},"application.onPreInstall")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onPreInstall:\n    - path: ""                  # string    | required | Job\'s yaml file, the relative path of the root directory\n      weight: 0                 # integer   | required | Order of execution of job, the smallest will be executed first\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"./config-deploy#run-jobs-before-installing-the-application"},"Read more about how to set up pre-install configurations ")),(0,i.kt)("h3",{id:"applicationhelmversion-and-applicationhelmvalues"},(0,i.kt)("inlineCode",{parentName:"h3"},"application.helmVersion")," and ",(0,i.kt)("inlineCode",{parentName:"h3"},"application.helmValues")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'helmValues:\n    - kye: ""                   # string    | The Helm chart value key\n      value: ""                 # string    | The Helm chart values\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"./config-deploy-helm"},"Read more to learn how to configure Helm application deployment")),(0,i.kt)("h3",{id:"applicationenv-and-applicationenvfrom"},(0,i.kt)("inlineCode",{parentName:"h3"},"application.env")," and ",(0,i.kt)("inlineCode",{parentName:"h3"},"application.envFrom")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"env: []\n\nenvFrom:\n    envFile: []                 # string[]  | optional | Use envFile to inject environment variable for all workload \n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"./config-deploy#inject-environment-variable-to-workloads"},"Read more about how to set up environment variables")),(0,i.kt)("h3",{id:"applicationservices"},(0,i.kt)("inlineCode",{parentName:"h3"},"application.services")),(0,i.kt)("p",null,"A Kubernetes application of microservice architecture consists of multiple microservices in the broad sense. Each microservice is a ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/workloads/"},"Kubernetes workload")," in the narrow sense."),(0,i.kt)("p",null,"Nocalhost inherits this concept, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"Services")," here corresponds to the microservices in the application. Therefore, Nocalhost's ",(0,i.kt)("inlineCode",{parentName:"p"},"Service")," can be seen as an enhancement to Kubernetes workload."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"services")," gives you the options to configure the workloads that give you better deployment and development experiences."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n    - name: ""                      # string    | required | Name of the workload, also is the display name in cluster\n      serviceType: ""               # string    | required | The Kubernetes Workloads type corresponding to the service\n      dependLabelSelector: ...      # struct    | optional | Dependent Pods label selector \n      container: ...                # struct    | optional | \n')),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Optional")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"Service")," configurations are not essential, it will not affect the usage of Nocalhost without configuring it. "))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"./config-services"},"Read more to learn how to configure ",(0,i.kt)("inlineCode",{parentName:"a"},"services"))))}d.isMDXComponent=!0}}]);